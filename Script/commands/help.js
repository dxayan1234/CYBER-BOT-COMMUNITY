const fs = require("fs");

module.exports = {
    name: "help",
    description: "View command information with an enhanced interface.",
    permission: 0,
    cooldown: 5,
    
    // ржжрзНрж░рж╖рзНржЯржмрзНржп: ржПржЗ ржХрзЛржбржЯрж┐ ржзрж░рзЗ ржирж┐ржЪрзНржЫрзЗ ржпрзЗ ржЖржкржирж╛рж░ Mirai bot instance ('bot') ржПрж░ ржоржзрзНржпрзЗ ржирж┐ржорзНржирж▓рж┐ржЦрж┐ржд ржмрзИрж╢рж┐рж╖рзНржЯрзНржпржЧрзБрж▓рзЛ ржЖржЫрзЗ:
    // - bot.commands: ржПржХржЯрж┐ Map, ржпрзЗржЦрж╛ржирзЗ рж╕ржм рж░рзЗржЬрж┐рж╕рзНржЯрж╛рж░рзНржб ржХржорж╛ржирзНржб ржЖржЫрзЗ (key: ржХржорж╛ржирзНржбрзЗрж░ ржирж╛ржо, value: ржХржорж╛ржирзНржб ржЕржмржЬрзЗржХрзНржЯ)ред
    // - bot.aliases: ржПржХржЯрж┐ Map, ржпрзЗржЦрж╛ржирзЗ alias ржерзЗржХрзЗ ржорзВрж▓ ржХржорж╛ржирзНржбрзЗрж░ ржирж╛ржо ржкрж╛ржУрзЯрж╛ ржпрж╛рзЯред
    // - bot.prefix: ржмржЯрзЗрж░ ржмрж░рзНрждржорж╛ржи ржкрзНрж░рж┐ржлрж┐ржХрзНрж╕ред
    // ржЖржкржирж╛рж░ ржмржЯрзЗрж░ ржХрж╛ржарж╛ржорзЛ ржЕржирзБржпрж╛рзЯрзА ржПржЗ ржЕржВрж╢ржЧрзБрж▓рзЛ ржкрж░рж┐ржмрж░рзНрждржи ржХрж░рждрзЗ рж╣рждрзЗ ржкрж╛рж░рзЗред

    async execute(bot, event, args) {
        const { commands, aliases, prefix } = bot; // ржЖржкржирж╛рж░ bot ржЕржмржЬрзЗржХрзНржЯ ржерзЗржХрзЗ ржХржорж╛ржирзНржб ржУ ржкрзНрж░рж┐ржлрж┐ржХрзНрж╕ ржирж┐ржи
        const commandName = args[0]?.toLowerCase();

        // ржЫржмрж┐ URL (ржЖржкржирж╛рж░ ржкржЫржирзНржжрзЗрж░ ржмрзНржпрж╛ржирж╛рж░)
        const bannerUrl = "https://i.imgur.com/ukbnuXS.png"; // ржмрзНржпрж╛ржирж╛рж░ ржЗржорзЗржЬ URL

        // 1. ржирж┐рж░рзНржжрж┐рж╖рзНржЯ ржХрзНржпрж╛ржЯрж╛ржЧрж░рж┐рж░ ржХржорж╛ржирзНржб ржжрзЗржЦрж╛ржирзЛрж░ ржЬржирзНржп (help c <category>)
        if (commandName === 'c' && args[1]) {
            const categoryArg = args[1].toUpperCase();
            const commandsInCategory = [];

            for (const cmd of commands.values()) {
                const category = cmd.category?.toUpperCase() || "GENERAL";
                if (category === categoryArg) {
                    commandsInCategory.push(cmd.name);
                }
            }

            if (commandsInCategory.length === 0) {
                return bot.sendGroupMessage(event.groupId, [{ type: 'Plain', text: `тЭМ No commands found in category: ${categoryArg}` }]);
            }

            let replyMsg = "тХФтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтЧЗтЧЖтЧЗтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХЧ\n"
                         + "      BOT COMMAND LIST\n"
                         + "тХатХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтЧЗтЧЖтЧЗтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХг";
            replyMsg += `\n   тФМтФАтФАтФАтФАтФАтФА ${categoryArg} тФАтФАтФАтФАтФАтФАтФР\n`;

            commandsInCategory.sort().forEach(name => {
                replyMsg += `тХС тФВ ЁЯЯв ${name}\n`;
            });

            replyMsg += "тХС тФФтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФШ\n"
                      + "тХЪтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтЧЗтЧЖтЧЗтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХЭ\n\n";
            replyMsg += `ЁЯУК Total Commands in this category: ${commandsInCategory.length}`;

            return bot.sendGroupMessage(event.groupId, [{ type: 'Plain', text: replyMsg }]);
        }

        // 2. ржПржХржЯрж┐ ржирж┐рж░рзНржжрж┐рж╖рзНржЯ ржХржорж╛ржирзНржбрзЗрж░ ржмрж┐рж╕рзНрждрж╛рж░рж┐ржд рждржерзНржп ржжрзЗржЦрж╛ржирзЛрж░ ржЬржирзНржп (help <command>)
        if (commandName && commandName !== 'all') {
            const cmd = commands.get(commandName) || commands.get(aliases.get(commandName));
            if (!cmd) {
                return bot.sendGroupMessage(event.groupId, [{ type: 'Plain', text: `тЪая╕П Command '${commandName}' not found!` }]);
            }

            const roleText = (role => {
                switch (role) {
                    case 1: return "ЁЯСС Group Admins";
                    case 2: return "тЪб Bot Admins";
                    default: return "ЁЯСе All Users";
                }
            })(cmd.permission);

            const usage = (cmd.guide || cmd.usages || "No usage guide available.")
                .replace(/\{pn\}/g, `${prefix}${cmd.name}`);

            let replyMsg = "тХФтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтЧЗтЧЖтЧЗтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХЧ\n"
                         + "тХС           COMMAND INFORMATION      \n"
                         + "тХатХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтЧЗтЧЖтЧЗтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХг\n"
                         + `тХС ЁЯП╖я╕П Name: ${cmd.name}\n`
                         + `тХС ЁЯУЭ Description: ${cmd.description || 'No description'}\n`
                         + `тХС ЁЯУВ Category: ${cmd.category?.toUpperCase() || 'GENERAL'}\n`
                         + `тХС ЁЯФд Aliases: ${cmd.aliases?.join(", ") || 'None'}\n`
                         + `тХС ЁЯФТ Permissions: ${roleText}\n`
                         + `тХС тП▒я╕П Cooldown: ${cmd.cooldown || 1}s\n`
                         + `тХС ЁЯСд Author: ${cmd.author || 'Unknown'}\n`
                         + "тХатХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтЧЗтЧЖтЧЗтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХг\n"
                         + "тХС ЁЯЫая╕П USAGE GUIDE\n"
                         + ` тХС ${usage.split("\n").join("\n тХС ")}\n`
                         + "тХЪтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтЧЗтЧЖтЧЗтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХЭ";

            return bot.sendGroupMessage(event.groupId, [{ type: 'Plain', text: replyMsg }]);
        }

        // 3. рж╕ржм ржХржорж╛ржирзНржб ржжрзЗржЦрж╛ржирзЛрж░ ржЬржирзНржп (help ржмрж╛ help all)
        const categories = new Map();
        for (const cmd of commands.values()) {
            const category = cmd.category?.toUpperCase() || "GENERAL";
            if (!categories.has(category)) {
                categories.set(category, []);
            }
            categories.get(category).push(cmd.name);
        }

        const sortedCategories = [...categories.keys()].sort();
        let replyMsg = "тХФтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтЧЗтЧЖтЧЗтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХЧ\n"
                     + "      BOT COMMAND LIST\n"
                     + "тХатХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтЧЗтЧЖтЧЗтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХг\n";
        
        let totalCommands = 0;

        for (const category of sortedCategories) {
            const commandsInCategory = categories.get(category).sort();
            totalCommands += commandsInCategory.length;

            replyMsg += `\n   тФМтФАтФАтФАтФАтФАтФА ${category} тФАтФАтФАтФАтФАтФАтФР\n`;
       
